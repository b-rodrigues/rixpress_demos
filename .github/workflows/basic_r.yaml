name: basic_r demo

on:
  repository_dispatch:
    types: [trigger-demo]
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

permissions: write-all

jobs:
  basic-r:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    defaults:
      run:
        working-directory: ./basic_r

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create this folder to silence warning
        run: mkdir -p ~/.nix-defexpr/channels

      - name: Fetch pipeline_outputs.nar from rixpress-runs branch if exists
        working-directory: ${{ github.workspace }}
        run: |
          if git ls-remote --exit-code origin rixpress-runs; then
            git fetch origin rixpress-runs:rixpress-runs
            if git ls-tree --name-only rixpress-runs | grep -q '^pipeline_outputs.nar$'; then
              git checkout rixpress-runs -- pipeline_outputs.nar
            else
              echo "pipeline_outputs.nar not found in rixpress-runs branch"
            fi
          else
            echo "rixpress-runs branch does not exist"
          fi

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=https://github.com/rstats-on-nix/nixpkgs/archive/r-daily.tar.gz

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: rstats-on-nix

      - name: Build dev env
        run: |
          nix-shell --expr "$(curl -sl https://raw.githubusercontent.com/ropensci/rix/main/inst/extdata/default.nix)" --run "Rscript -e 'source(\"gen-env.R\")'"

      - name: Checkout default.nix
        run: cat default.nix

      - name: Run import_nix_archive if file exists
        run: |
          if [ -f ../pipeline_outputs.nar ]; then
            nix-shell --quiet --run "Rscript -e 'rixpress::import_nix_archive(archive_file = \"../pipeline_outputs.nar\")'"
          else
            echo "pipeline_outputs.nar not found"
          fi

      - name: Generate and check out pipeline
        run: |
          nix-shell --quiet --run "Rscript -e 'source(\"gen-pipeline.R\")'"
          cat pipeline.nix

      - name: Check DAG
        run: |
          nix-shell --quiet -p haskellPackages.stacked-dag --run "stacked-dag dot dag.dot"

      - name: Build pipeline
        run: |
          nix-shell --quiet --run "Rscript -e 'rixpress::rxp_make()'"

      - name: Inspect built derivations
        run: |
          nix-shell --quiet --run "Rscript -e 'rixpress::rxp_inspect()'"
